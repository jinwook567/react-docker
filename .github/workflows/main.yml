# This is a basic workflow to help you get started with Actions

name: Auto-Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Docker Meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: we2dinc/react-docker
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          # platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          # labels: ${{ steps.docker_meta.outputs.labels }}

      - name: Trigger the CodeDeploy in EC2 instance
        run: aws deploy --region ap-northeast-2 create-deployment --application-name code-deploy-test --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name test-deploy --github-location repository=jinwook567/react-docker,commitId=${GITHUB_SHA}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          Default_region_name: ap-northeast-2
      # Docker Hub에 새로운 Image가 push 완료되면 CodeDeploy Agent가 동작되도록 합니다.
      # --application-name과 --deployment-group-name은 아까 작성하신 애플리케이션 이름과 그룹 이름으로 대체하시면 됩니다.
      # [Your GitHub Repository] 예시) Woomin-Jeon/facebook-clone-server
      # "commitId=${GITHUB_SHA}" 코드가 자동으로 최신 commit을 불러옵니다.
      # 아까 보관해두었던 AWS_ACCESS_KEY_ID와 AWS_SECRET_ACCESS_KEY는 GitHub secrets에 저장해둡니다.
